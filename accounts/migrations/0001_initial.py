# Generated by Django 4.2.16 on 2025-02-03 08:40

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="MinduelUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "profile_photo",
                    models.ImageField(
                        blank=True, null=True, upload_to="profile_photos/"
                    ),
                ),
                (
                    "country_code",
                    django_countries.fields.CountryField(
                        blank=True, max_length=2, null=True
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="GlobalGameMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(unique=True)),
                ("total_games_played", models.IntegerField(default=0)),
                ("avg_score", models.FloatField(default=0.0)),
                ("avg_completion_time", models.FloatField(default=0.0)),
                ("category_accuracies", models.JSONField(default=dict)),
                ("category_response_times", models.JSONField(default=dict)),
                ("difficulty_distribution", models.JSONField(default=dict)),
            ],
            options={
                "verbose_name_plural": "Global Game Metrics",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="UserPerformanceMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("logical_reasoning_accuracy", models.FloatField(default=0.0)),
                ("verbal_linguistic_accuracy", models.FloatField(default=0.0)),
                ("spatial_reasoning_accuracy", models.FloatField(default=0.0)),
                ("critical_thinking_accuracy", models.FloatField(default=0.0)),
                ("logical_reasoning_correct", models.IntegerField(default=0)),
                ("logical_reasoning_total", models.IntegerField(default=0)),
                ("verbal_linguistic_correct", models.IntegerField(default=0)),
                ("verbal_linguistic_total", models.IntegerField(default=0)),
                ("spatial_reasoning_correct", models.IntegerField(default=0)),
                ("spatial_reasoning_total", models.IntegerField(default=0)),
                ("critical_thinking_correct", models.IntegerField(default=0)),
                ("critical_thinking_total", models.IntegerField(default=0)),
                ("avg_response_time", models.FloatField(default=0.0)),
                ("fastest_correct_answer", models.FloatField(null=True)),
                ("slowest_correct_answer", models.FloatField(null=True)),
                ("total_questions_answered", models.IntegerField(default=0)),
                ("correct_answers_streak", models.IntegerField(default=0)),
                ("highest_streak", models.IntegerField(default=0)),
                ("weekly_improvement_rate", models.FloatField(default=0.0)),
                ("monthly_improvement_rate", models.FloatField(default=0.0)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="performance_metrics",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "User Performance Metrics",
            },
        ),
    ]
